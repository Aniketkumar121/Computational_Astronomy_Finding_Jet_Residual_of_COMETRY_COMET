# -*- coding: utf-8 -*-
"""Final_CA_C3_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xPmD7DqN_G5t69cwvH-fRkbOMlvbJUw3
"""

!pip install astropy

# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from astropy.io import fits
from scipy.optimize import curve_fit
import os

# Define the directory containing the FITS files
directory_path = '/content/comets2'

# List all FITS files in the directory
fits_files = [f for f in os.listdir(directory_path) if f.endswith('.fits')]
print(f"Found {len(fits_files)} FITS files.")

def process_fits(fits_file):
    with fits.open(fits_file) as hdul:
        image_data = hdul[0].data

    plt.imshow(image_data, cmap='gray')
    plt.colorbar()
    plt.title(f'Original Comet Image: {fits_file}')
    plt.show()

    # Calculate the centroid using the weighted average method
    total_intensity = np.sum(image_data)
    i_indices, j_indices = np.meshgrid(np.arange(image_data.shape[0]), np.arange(image_data.shape[1]), indexing='ij')
    x0 = np.sum(i_indices * image_data) / total_intensity
    y0 = np.sum(j_indices * image_data) / total_intensity
    I0 = image_data[int(round(x0)), int(round(y0))]

    print(f"--------------------------------------------")
    print(f"Centroid: ({x0:.2f}, {y0:.2f}), Peak Intensity: {I0}")
    print(f"--------------------------------------------")

    i, j = np.meshgrid(np.arange(image_data.shape[0]), np.arange(image_data.shape[1]), indexing='ij')
    rho = np.sqrt((i - x0)**2 + (j - y0)**2)
    theta = np.arctan2(j - y0, i - x0) * 360 / (2 * np.pi)

    T1 = np.column_stack((i.ravel(), j.ravel(), rho.ravel(), theta.ravel(), image_data.ravel()))

    fig, ax = plt.subplots(1, 2, figsize=(12, 6))
    ax[0].imshow(rho, cmap='viridis')
    ax[0].set_title('Radial Distances from Centroid')
    ax[1].imshow(theta, cmap='twilight')
    ax[1].set_title('Angular Positions')
    plt.show()

    return image_data, x0, y0, I0, rho, theta, T1

def fit_model(T1, I0, image_data, num_bins=10):
    bin_edges = np.linspace(-180, 180, num_bins + 1)
    T1[:, 3] = (T1[:, 3] + 180) % 360 - 180  # Normalize angles to [-180, 180]
    T1 = T1[np.argsort(T1[:, 2])]  # Sort by rho
    bin_indices = np.digitize(T1[:, 3], bin_edges) - 1

    alpha_values = []

    for b in range(num_bins):
        mask = bin_indices == b
        if np.any(mask):
            rho_bin = T1[mask, 2]
            I_bin = T1[mask, 4] + 1e-6  # Add a small constant to avoid log(0)
            log_I_bin = np.log(I_bin)
            popt, _ = curve_fit(lambda r, alpha: np.log(I0) - alpha * r, rho_bin, log_I_bin, p0=[0.01])
            alpha_values.append(popt[0])
            print(f"Bin {b}: Alpha = {popt[0]}")
        else:
            alpha_values.append(np.nan)

    theta_midpoints = 0.5 * (bin_edges[:-1] + bin_edges[1:])
    valid = ~np.isnan(alpha_values)
    if np.any(valid):
        cosine_params, _ = curve_fit(lambda t, A, theta0: 1 + A * np.cos(np.radians(t) - np.radians(theta0)), theta_midpoints[valid], np.array(alpha_values)[valid], p0=[0.5, 0])
        print(f"Cosine Fit Params: A = {cosine_params[0]}, theta0 = {cosine_params[1]}")
    else:
        cosine_params = [0, 0]
        print("Cosine Fit: No valid alpha values found")

    # Reshape model_image first before calculating residuals
    model_image_flat = I0 * np.exp(-((1 + cosine_params[0] * np.cos(np.radians(T1[:, 3]) - np.radians(cosine_params[1]))) * T1[:, 2]))
    model_image = model_image_flat.reshape(image_data.shape)
    residuals = image_data - model_image

    return model_image, residuals, cosine_params

def process_all_fits(directory):
    for filename in os.listdir(directory):
        if filename.endswith(".fits"):
            fits_path = os.path.join(directory, filename)
            image_data, x0, y0, I0, rho, theta, T1 = process_fits(fits_path)
            model_image, residuals, params = fit_model(T1, I0, image_data)

            fig, ax = plt.subplots(1, 3, figsize=(15, 5))
            ax[0].imshow(image_data, cmap='gray')
            ax[0].set_title('Original Image')
            ax[1].imshow(model_image, cmap='gray')
            ax[1].set_title('Fitted Model Image')
            ax[2].imshow(residuals, cmap='gray')
            ax[2].set_title('Residuals (Jet Structures)')
            plt.show()

            print(f"----------------------------------------------------------------")
            print(f"Model Parameters for {filename}: {params}")
            print(f"----------------------------------------------------------------")

# Example usage: process all FITS files in a directory
process_all_fits('/content/comets2')